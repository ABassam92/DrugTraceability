pragma solidity ^0.6.0;

//Creating a smartcontract for a Lot 

contract Lot {
    
    address payable ownerID; //The eth address of the contract deployer
    mapping(address => uint) public boxesPatient; //Mapping the purchased boxes to their corresonding patient ID
    string lotName; // A variable that specifies the lot Name
    uint numBoxes; //A variable for the number of boxes in a lot
    uint lotPrice; //The price of selling the whole lot
    uint boxPrice; //The price of selling one box of the lot to a patient
    //Creating a struct for the uploaded image to the IPFS
    struct image{
        string IPFShash;
    }
    
    
    //Defining events 
    event newOwner(address oldownerID,address newownerID);
    event lotManufactured(address manufacturer);
    event imageuploaded(address manufacturer);
    event lotSale(string _lotName,uint _numBoxes, uint _lotPrice, uint _boxPrice);
    event lotSold(address newownerID);
    event boxesSold(uint _soldBoxes, address newownerID);
    
    //Defining Modifiers
    
    // This modifier makes sure that only the original owner executes the given function
    modifier onlyOwner(){
        require(msg.sender == ownerID, "The sender is not eligible to run this function");
        _;
    }
    //Creating the contract constructor
    
    constructor() public{
       ownerID = msg.sender;
       emit newOwner(address(0), ownerID);
    }
    
    //Defining Functions
    
    // View the current owner
    function currentOwner() public view returns (address _currentOwner){
        return ownerID;
    }
    
    //A function for the lot specification
    
    function lotDetails(string memory _lotName, uint _lotPrice,uint _numBoxes, uint _boxPrice) public onlyOwner() {
        
        lotName = _lotName;
        lotPrice = _lotPrice;
        numBoxes = _numBoxes;
        boxPrice = _boxPrice;
        
        //ownerID = msg.sender;
        
        emit lotManufactured(msg.sender);
    }
    
    //Creating image upload function to store the image of the lot on IPFS
    function  uploadLotImage (string memory _ipfsHash) public onlyOwner()  returns (bool _success)  {
            
        require(bytes(_ipfsHash).length == 46);
        image(_ipfsHash);
        _success = true;
        
        emit imageuploaded(msg.sender);
        
    }
    
    //Creating a function to declare that the lot is for sale 
    
    function grantSale() public onlyOwner(){
        
        emit lotSale(lotName,numBoxes,lotPrice,boxPrice);
    
    }    
    //Creating a function to buy lot 
    
    function buyLot () public payable {
        address payable buyer = msg.sender;
        address payable seller = ownerID;
        require(buyer != seller, "The lot is already owned by the function caller");
        require(msg.value >= lotPrice, "insufficient payment"); //Checks if the buyer paid enough
        uint refundAmount = msg.value - lotPrice; //if msg.value is more than enough then the reminder is refunded to the buyer
        msg.sender.transfer(refundAmount); // Transfers the excess amount to the buyer

        seller.transfer(lotPrice); //Transfering ether to the seller
        ownerID = buyer; //Upating the ownerID
        
        emit lotSold(ownerID); 

    
        
    }
    
    //Creating a function to sell boxes to patients
    
    function buyBox (uint numboxes2buy) public payable {
        address payable buyer = msg.sender;
        address payable seller = ownerID; 
        require(numboxes2buy <= numBoxes, "The specified amount exceeds the limit");
        require(msg.value >= boxPrice*numboxes2buy, "insufficient payment");
        uint refundAmount = msg.value - (boxPrice*numboxes2buy);
        msg.sender.transfer(refundAmount);
 
        seller.transfer(boxPrice*numboxes2buy); //Transfering ether to the seller
        boxesPatient[buyer] = numboxes2buy;
        numBoxes -= numboxes2buy;
        
        emit boxesSold(numboxes2buy, ownerID);  
        
    }
    
    //Creating a function to view lot details
    
    function viewLot () public view returns(string memory _lotName, uint _lotPrice, uint _numBoxes, uint _boxPrice, address _ownerID) {
        
        return(lotName, lotPrice, numBoxes, boxPrice,ownerID);
        
    }
    
    //Creating a function to view how many boxes are owned by each patient
    
    function viewBox (address _account) public view returns(uint _boxesPatient){
        return(boxesPatient[_account]);
    }
    
    
}
